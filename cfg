#!/bin/bash
CONFIG_HOME="${HOME}/.config/"
# NVIM_HOME="${CONFIG_HOME}/nvim/"

# Get the current location of this bash script
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
CONFIG_BACKUP="${DIR}/config/"
ZSH_BACKUP="${DIR}/zsh/"
AWS_BACKUP="${DIR}/aws/"
GIT_BACKUP="${DIR}/git/"
LOCAL_BACKUP="${DIR}/local"

ACTION=$1

# Determine the operating system (either `linux` or `darwin` or `windows`)
OS=$(uname -s | tr '[:upper:]' '[:lower:]')

# List of linux packages to install
APT_PACKAGES=(
    git
    curl
    wget
    python3
    python-dev
    python-pip
    python3-dev
    python3-pip
    zsh
    grep
    awk
    software-properties-common
)

# List of mac packages to install
HOMEBREW_PACKAGES=(
    git
)

# List of directories to be stashed
CONFIG_BACKUP_DIRS=(
    nvim
    gh
)

main() {
    echo "You are running the following OS: ${OS}"

    # run ensure_prerequisites
    ensure_prerequisites

    if [ "$ACTION" == "stash" ]; then
        run_stash
        exit 0
    fi

    if [ "$ACTION" == "install" ]; then
        run_install
        exit 0
    fi

    if [ "$ACTION" == "restore" ]; then
        run_restore
        exit 0
    fi

    echo "Please run one of \`cfg [stash|restore|install]\`"
}

run_stash() {
    # Loop through CONFIG_BACKUP_DIRS and backup each directory
    for config_backup_dir in "${CONFIG_BACKUP_DIRS[@]}"; do
        if [ -d "${CONFIG_HOME}/${config_backup_dir}" ]; then
            echo "Backing up ${config_backup_dir} config..."
            mkdir -p "${CONFIG_BACKUP}/${config_backup_dir}"
            cp -r "${CONFIG_HOME}/${config_backup_dir}/" "${CONFIG_BACKUP}/${config_backup_dir}/"
        fi
    done

    # Backup zsh
    echo "Backing up zsh config..."
    mkdir -p "${ZSH_BACKUP}"
    cp -r "${HOME}/.zshrc" "${ZSH_BACKUP}/.zshrc"
    cp -r "${HOME}/.zsh_profile" "${ZSH_BACKUP}/.zsh_profile"
    cp -r "${HOME}/.zprofile" "${ZSH_BACKUP}/.zprofile"

    # Backup banner
    echo "Backing up banner..."
    cp -r "${HOME}/.banner" "${DIR}/.banner"

    # Backup aws config
    echo "Backing up aws config..."
    mkdir -p "${AWS_BACKUP}"
    cp -r "${HOME}/.aws/config" "${AWS_BACKUP}/config"

    # Backup git config
    echo "Backing up git config..."
    mkdir -p "${GIT_BACKUP}/${OS}"
    cp -r "${HOME}/.gitconfig" "${GIT_BACKUP}/${OS}/.gitconfig"

    # backup scritps
    echo "Backing up scripts..."
    mkdir -p "${LOCAL_BACKUP}/scripts"
    cp -r "${HOME}/.local/scripts/" "${LOCAL_BACKUP}/scripts/"
}

run_restore() {
    # restore config from backup
    for dir in "${CONFIG_BACKUP_DIRS[@]}"; do
        if [ -d "${CONFIG_BACKUP}/${dir}" ]; then
            echo "Restoring ${dir} config..."
            mkdir -p "${CONFIG_HOME}/${dir}"
            cp -r "${CONFIG_BACKUP}/${dir}/" "${CONFIG_HOME}/${dir}"
        fi
    done

    # Restore zsh
    cp -r "${ZSH_BACKUP}/.zshrc" "${HOME}/.zshrc"
    cp -r "${ZSH_BACKUP}/.zsh_profile" "${HOME}/.zsh_profile"
    cp -r "${ZSH_BACKUP}/.zprofile" "${HOME}/.zprofile"

    # Restore banner
    cp -r "${DIR}/.banner" "${HOME}/.banner"

    # Restore aws config
    mkdir -p "${HOME}/.aws"
    cp -r "${AWS_BACKUP}/config" "${HOME}/.aws/config"

    # Restore git config
    cp -r "${GIT_BACKUP}/.gitconfig" "${HOME}/.gitconfig"

    # Restore scripts
    mkdir -p "${HOME}/.local/scripts"
    cp -r "${SCRIPTS_BACKUP}/scripts/" "${HOME}/.local/scripts/"
}

run_install() {
    # TODO: Implement install functionality
    echo "Installing packages..."

    if [ "$OS" == "linux" ]; then
        # TODO: add support for RPM, ARCH, and NIX
        if has_apt; then
            install_debian
        else
            echo "apt not found! Bailing out!"
            exit 1
        fi
    elif [ "$OS" == "darwin" ]; then
        install_mac
    elif [ "$OS" == "windows" ]; then
        install_windows
    fi

    # TODO: instal zsh, zsh theme, neovim, python3
    
    # TODO: install for linux dev servers: fonts, nextcloud, nvm, gh, docker, docker-compose, golang, build-essential, lolcat
    # TODO: install for linux desktops: kitty, fonts, nextcloud, vscode-insiders, nvm, gh, docker, docker-compose, golang, build-essential, lolcat
    # TODO: install for mac iterm2, fonts, nexcloud, vscode-insiders, nvm, gh, docker, docker-compose, golang, build-essential, lolcat
    # TODO: install ocaml
    # TODO: install golang
    # TODO: install nvm
    # TODO: Add seafile drive : https://help.seafile.com/drive_client/drive_client_for_linux/ 
}

install_debian() {
    sudo apt update
    echo "Do you want to upgrade all your packages before getting started? (recommended)"
    read -n 1 -p "Upgrade packages? (y/n)" res_char
    echo " "
    if [ "$res_char" == "y" ]; then
        sudo apt upgrade -y
    fi

    echo "Installing base packages..."
    echo "The following packages will be installed if not present: ${APT_PACKAGES[@]}"
    echo "Do you want to continue? (if not will skip to next step)"
    read -n 1 -p "Install base packages? (y/n)" res_char
    echo " "
    if [ "$res_char" == "y" ]; then
        sudo apt-get install -y "${APT_PACKAGES[@]}"
    fi

    # Now install special stuff
    if has_oh_my_zsh; then
        echo "oh-my-zsh already installed! Skipping..."
    else
        echo "Installing oh-my-zsh..."
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    fi
    install_zsh_theme

    # echo "TODO: Activate oh-my-zsh"
    # Check if shell is zsh, if not, activate
    if [ -n "$ZSH_VERSION" ]; then
        echo "Zsh is already activated"
    else
        echo "Activating zsh..."
        chsh -s $(which zsh)
        echo "Zsh activated"
    fi

    # Install neovim
    echo "Installing Neovim from nightly (gotta do source, sorry)..."
    mkdir -p /tmp/nvim
    wget -O /tmp/nvim-linux64.tar.gz https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz
    tar -xzf /tmp/nvim-linux64.tar.gz -C /tmp/nvim

    echo "Neovim installed"

    # Install nvm
    echo "TODO: Install nvm"

    # Install gh
    echo "TODO: Install gh"

    # Install docker
    echo "TODO: Install docker"

    # Install lolcat
    echo "TODO: Install lolcat"

    # Install build-essential
    echo "TODO: Install build-essential"
    echo "Do you want to install build essentials? (recommended if not a ops server)"
    read -n 1 -p "Install build-essential? (y/n)" res_char
    echo " "
    if [ "$res_char" == "y" ]; then
        sudo apt-get install build-essential
    fi


    # TODO: instal zsh, zsh theme, neovim, python3
    
    # TODO: install for linux dev servers: fonts, nextcloud, nvm, gh, docker, docker-compose, golang, build-essential, lolcat
    # TODO: install for linux desktops: kitty, fonts, nextcloud, vscode-insiders, nvm, gh, docker, docker-compose, golang, build-essential, lolcat
    # TODO: install for mac iterm2, fonts, nexcloud, vscode-insiders, nvm, gh, docker, docker-compose, golang, build-essential, lolcat
    # TODO: install ocaml
    # TODO: install golang
    # TODO: install nvm
    # TODO: Add seafile drive : https://help.seafile.com/drive_client/drive_client_for_linux/ 
}

install_mac() {
    echo "not implemented for mac. Bailing out!"
    exit 1
}
install_windows() {
    echo "not implemented for windows. Bailing out!"
    exit 1
}

ensure_prerequisites() {
    # Check if git is installed
    if ! [ -x "$(command -v git)" ]; then
        echo "Git not installed! Installing git ..." >&2
        install_git
    fi

    if [ "$OS" == "darwin" ]; then
        ensure_mac_prequisites
    elif [ "$OS" == "windows" ]; then
        ensure_windows_prequisites
    fi
}

ensure_mac_prequisites() {
    # Check if brew is installed
    if ! [ -x "$(command -v brew)" ]; then
        echo "Homebrew not installed! Installing homebrew ..." >&2
        exit 1
    fi
}
ensure_windows_prequisites() {
    # Check if choco is installed
    if ! [ -x "$(command -v choco)" ]; then
        echo "Chocolatey not installed! Installing chocolatey ..." >&2
        install_choco
    fi
}

install_git() {
    # Install git
    if [ "$OS" == "linux" ]; then
        sudo apt-get install git
    elif [ "$OS" == "darwin" ]; then
        xcode-select --install
    elif [ "$OS" == "windows" ]; then
        choco install git
    fi
}

# Only run on macOS
install_homebrew() {
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    
}

install_choco() {
    powershell -Command "Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"
}

has_apt() {
    if command -v apt > /dev/null; then
        return 1 # true
    else
        return 0 # false
    fi
}

has_curl() {
    if command -v curl > /dev/null; then
        return 1 # true
    else
        return 0 # false
    fi
}

has_python3() {
    if command -v python3 > /dev/null; then
        return 1 # true
    else
        return 0 # false
    fi
}

has_zsh() {
    if command -v zsh > /dev/null; then
        return 1 # true
    else
        return 0 # false
    fi
}

has_oh_my_zsh() {
    if [ -d "${HOME}/.oh-my-zsh" ]; then
        return 1 # true
    else
        return 0 # false
    fi
}

install_zsh_theme() {
    REQUIRED_THEME=$(grep '^ZSH_THEME=\"' $DIR/zsh/.zshrc | awk -F'"' '{print $2}')
    if [ -d "${HOME}/.oh-my-zsh/custom/themes/${REQUIRED_THEME}" ]; then
        echo "ZSH theme ${REQUIRED_THEME} already installed! Skipping..."
        return 0 # true
    else
        echo "Installing ZSH theme ${REQUIRED_THEME}..."
        if [ "$REQUIRED_THEME" = "powerlevel10k/powerlevel10k" ]; then 
            git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
            echo "In theory if you run \`p10k configure\` if you're fonts are weird you should be good to go!"
            return 0 # true
        fi
    fi

    echo "Warning could not install ZSH theme ${REQUIRED_THEME}! Unknown theme!"

    return 1 # false
}

# Exec starts here


main
